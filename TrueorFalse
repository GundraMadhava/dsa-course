#include <stdio.h>
#include <stdbool.h>

// Function to check if a character is an opening bracket
bool isOpeningBracket(char ch) {
    return (ch == '(' || ch == '{' || ch == '[');
}

// Function to check if two characters form a valid pair of brackets
bool isValidPair(char open, char close) {
    return (open == '(' && close == ')') ||
           (open == '{' && close == '}') ||
           (open == '[' && close == ']');
}

// Function to validate the input string
bool isValidString(const char* s) {
    char stack[1000]; // Assuming the maximum length of the string is 1000
    int top = -1; // Initialize stack top

    for (int i = 0; s[i] != '\0'; i++) {
        if (isOpeningBracket(s[i])) {
            stack[++top] = s[i]; // Push opening bracket onto the stack
        } else {
            if (top == -1 || !isValidPair(stack[top], s[i])) {
                return false; // Invalid pair or empty stack
            }
            top--; // Pop the matching opening bracket
        }
    }

    return (top == -1); // Stack should be empty at the end
}

int main() {
    const char* input = "()"; // Change this input as needed
    if (isValidString(input)) {
        printf("Output: true\n");
    } else {
        printf("Output: false\n");
    }
    return 0;
}

